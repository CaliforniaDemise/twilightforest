plugins {
    id 'java'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.35'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

///////////////////////////////////////////////////
// ForgeGradle
///////////////////////////////////////////////////
version = (hasProperty("CIRevision") ? CIRevision : mod_version)
group = group_name
archivesBaseName = "${mod_id}-${minecraft_version}"
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    mcVersion.set("1.12.2")
    useDependencyAccessTransformers = true
    extraRunJvmArguments.addAll("-Xms128m", "-Xmx2048m")
    injectedTags.put('MOD_VERSION', project.version)
}

tasks.injectTags.configure {
    outputClassName.set("twilightforest.Tags")
}

for (File at : sourceSets.getByName("main").resources.files) {
    if (at.name.toLowerCase().endsWith("_at.cfg")) {
        tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
        tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
    }
}

processResources {

    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        fcd.expand (
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }

    rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
}

jar {
    manifest {
        attributes 'FMLAT': 'tf_at.cfg'
    }
}

repositories {
    maven {
        name 'progwm\'s Maven' // JEI + Mantle + TCon
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'tterrag\'s Maven' // CTM
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'Jared\'s Maven' // Immersive Engineering + Patchouli
        url 'https://blamejared.com/maven'
    }
    maven {
        name 'Cleanroom Maven' // GroovyScript
        url 'https://repo.cleanroommc.com/releases'
    }
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    // progwml6
    implementation rfg.deobf("mezz.jei:jei_${minecraft_version}:${jei_version}")

    compileOnly rfg.deobf("slimeknights.mantle:Mantle:${minecraft_sub_version}-${mantle_version}")
    compileOnly rfg.deobf("slimeknights:TConstruct:${minecraft_version}-${tcon_version}")

    // tterrag
    compileOnly rfg.deobf("team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}")
    //compileOnly rfg.deobf("team.chisel:Chisel:MC${minecraft_version}-${chisel_version}")

    // blamejared
    compileOnly "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.700"
    compileOnly rfg.deobf("blusunrize:ImmersiveEngineering:${immersive_engineering_version}")
    compileOnly rfg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // cleanroom
    if (project.enable_grs.toBoolean()) {
        annotationProcessor "org.ow2.asm:asm-debug-all:5.2"
        annotationProcessor "com.google.guava:guava:32.1.2-jre"
        annotationProcessor "com.google.code.gson:gson:2.8.9"
        String mixinBooter = modUtils.enableMixins('zone.rong:mixinbooter:10.0')
        annotationProcessor (mixinBooter) { transitive = false }
        runtimeOnly "zone.rong:mixinbooter:10.0"

        implementation("com.cleanroommc:groovyscript:1.2.0") { transitive = false }
    }
    else compileOnly("com.cleanroommc:groovyscript:1.2.0") { transitive = false }

    // cursemaven
    compileOnly rfg.deobf("curse.maven:forestry-59751:2918418")
    compileOnly rfg.deobf("curse.maven:baubles-227083:2518667")
    compileOnly rfg.deobf("curse.maven:thaumcraft-223628:2629023")
}

//task createPom {
//    doLast {
//        pom {
//            project {
//                groupId project.group
//                artifactId project.archivesBaseName
//                version project.version
//
//                inceptionYear '2012'
//                licenses {
//                    license {
//                        name 'LGPL 2.1'
//                        url 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html'
//                        distribution 'repo'
//                    }
//                }
//            }
//        }.writeTo(libsDir.path + "/" + project.archivesBaseName + "-" + project.version + ".pom")
//    }
//}
//
//build.dependsOn createPom
